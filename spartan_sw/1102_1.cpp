#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
//거쳐간 숫자들의 합이 최대일떄의 크기
//최적이란 단어 -> 다이나믹 프로그래밍 문제
//그리디의 경우 괜히 낚으려고 최적이란 단어를 넣기도함
//그러므로 최적이란 단어가 있으면 그리디인지 아닌지 판단하고
//2, 3케이스로 나누면 쉽게 풀리는가를 보면 다이나믹인지 알 수 있다
//보통 다이나믹 1문제 무조건 나오고 많이 나오지는 않는다 
//이 문제는 안나오는법이 없고 심하면 2문제도 나옴
//그러니까 코테직전에 케이스별로 달달 외워야하는 유형이다
int main(void){
	//문제 풀어보기 일단 똑같이 생긴 자료구조 만들고
	//바텀업 방식으로 풀자면 맨 밑줄 트리 입력받고 하는식
	//
	//두번째 문제는 os 스케쥴링문제랑 비슷
	//첫번째 날에 받으면 두번째날에 못받음 
	//따라서 2번쨰꺼 받았다는 가정과 안받았다는 가정이 존재함
	//세번째꺼도 첫번쨰꺼가 3일걸리니까 첫번째 받으면 경우의수 나뉘는데
	//두번째꺼의 나뉜거에 따라 또 경우의수가 나뉘겠지
	//결국 그려보면 오른쪽으로 갈수록 경우 늘어나서 삼각형 모양이됨
	//
	//뒤쪽부터 봐서 뒤에 2개는 소요시간이 종료일 넘기니까 어짜피 못함
	//그럼 뒤에서 세번쨰 현재까지의 가치랑 비교해서 dp[i]채워넣는 방식을
	//책에서는 사용하고 있음
	//dp는 다 0으로 초기화해놨으니까 
	//어떻게 푸는지는 직접 문제 풀면서 익히는게 좋다
	//다음주에는 이걸 이어서 문제풀겠다
